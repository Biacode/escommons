buildscript {
    ext {
        kotlinVersion = "1.3.50"
        springBootVersion = "2.1.8.RELEASE"
        elasticSearchVersion = '7.3.2'
        apacheCommonsLang3Version = '3.6'
        apacheCommonsIoVersion = '2.5'
        jsr305Version = '3.0.2'
        easymockVersion = '3.4'
        sonarqubeVersion = '2.6'
        vavrVersion = "0.9.0"
        slf4jVersion = "1.7.28"
        log4jVersion = "2.12.1"
        propDepsPluginVersion = '0.0.10.RELEASE'
    }
    repositories {
        mavenLocal()
        mavenCentral()
        jcenter()
        maven { url 'http://repo.spring.io/plugins-release' }
    }
    dependencies {
        classpath("org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:$sonarqubeVersion")
        classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlinVersion}")
        classpath("org.jetbrains.kotlin:kotlin-allopen:${kotlinVersion}")
        classpath("io.spring.gradle:propdeps-plugin:${propDepsPluginVersion}")
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    }
}

plugins {
    id 'org.springframework.boot' version '2.1.8.RELEASE' apply false
    id 'io.spring.dependency-management' version '1.0.8.RELEASE'
}

apply plugin: "org.sonarqube"
apply plugin: 'jacoco'

sonarqube {
    properties {
        property "sonar.sourceEncoding", "UTF-8"
        property "sonar.projectName", "escommons"
        property "sonar.projectKey", "org.biacode.escommons"
        property "sonar.organization", "escommons"
        property "sonar.host.url", "https://sonarcloud.io"
        property "sonar.language", "java"
        property "sonar.login", System.getenv("SONAR_TOKEN")
        property "sonar.jacoco.reportPaths", "${project.buildDir}/jacoco/test.exec"
        property "sonar.exclusions", ["**com/biacode/escommons/api/model/**", "**com/biacode/escommons/api/client/**"]
    }
}

allprojects {

    ext['elasticsearch.version'] = elasticSearchVersion

    apply plugin: "idea"
    apply plugin: "io.spring.dependency-management"
    apply plugin: "org.jetbrains.kotlin.jvm"

    apply plugin: 'java'
    apply plugin: "kotlin-spring"
    apply plugin: "eclipse"
    apply plugin: 'signing'

    apply plugin: 'propdeps'
    apply plugin: 'propdeps-maven'
    apply plugin: 'propdeps-idea'
    apply plugin: 'propdeps-eclipse'

    if (System.env['DEPLOY_TO_NEXUS'] != null) {
        signing {
            sign configurations.archives
        }
    }

    group = 'org.biacode.escommons'
    version = '7.3.2_0.0.7'
    sourceCompatibility = 1.8

    configurations.all {
        exclude group: "org.apache.logging.log4j", module: 'log4j-to-slf4j'
    }

    task makePretty(type: Delete) {
        delete 'out'
    }

    task javadocJar(type: Jar) {
        classifier = 'javadoc'
        from javadoc
    }

    task sourcesJar(type: Jar) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    artifacts {
        archives javadocJar, sourcesJar
    }

    compileKotlin {
        kotlinOptions.jvmTarget = "1.8"
    }

    compileTestKotlin {
        kotlinOptions.jvmTarget = "1.8"
    }

    repositories {
        mavenLocal()
        mavenCentral()
        jcenter()
    }

    uploadArchives {
        repositories {
            mavenDeployer {
                beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

                repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2") {
                    authentication(userName: "${System.getenv('NEXUS_USERNAME')}", password: "${System.getenv('NEXUS_PASSWORD')}")
                }

                snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots") {
                    authentication(userName: "${System.getenv('NEXUS_USERNAME')}", password: "${System.getenv('NEXUS_PASSWORD')}")
                }

                pom.project {
                    name 'EsCommons'
                    packaging 'jar'
                    // optionally artifactId can be defined here
                    description 'Elasticsearch commons library.'
                    url 'https://github.com/Biacode/escommons'

                    scm {
                        connection 'scm:git:git@github.com:Biacode/escommons.git'
                        developerConnection 'scm:git:ssh://github.com:Biacode/escommons.git'
                        url 'https://github.com/Biacode/escommons/tree/master'
                    }

                    licenses {
                        license {
                            name 'MIT License'
                            url 'https://opensource.org/licenses/MIT'
                        }
                    }

                    developers {
                        developer {
                            id 'biacode'
                            name 'Artur Asatryan'
                            email 'biacoder@gmail.com'
                        }
                    }
                }
            }
        }
    }

    dependencies {
        compile "org.elasticsearch.client:elasticsearch-rest-high-level-client:$elasticSearchVersion"
        compile 'org.slf4j:slf4j-api'
        implementation "org.springframework:spring-context"
        implementation 'org.jetbrains.kotlin:kotlin-stdlib'
        implementation "com.fasterxml.jackson.core:jackson-databind"
        implementation "org.apache.commons:commons-lang3:$apacheCommonsLang3Version"
        implementation "commons-io:commons-io:$apacheCommonsIoVersion"
        implementation "io.vavr:vavr:$vavrVersion"
        implementation "com.google.code.findbugs:jsr305:$jsr305Version"
        testImplementation project(':escommons-test')
        testImplementation "junit:junit"
        testImplementation "org.easymock:easymock:$easymockVersion"
        testImplementation "org.assertj:assertj-core"
    }

    dependencyManagement {
        imports {
            mavenBom("org.springframework.boot:spring-boot-dependencies:2.1.8.RELEASE") {
                bomProperty("kotlin.version", kotlinVersion)
            }
        }
    }

    compileJava.dependsOn(processResources)
}

project(':escommons-core') {
    apply plugin: 'maven'
}

project(':escommons-starter-core') {

    apply plugin: 'maven'

    dependencies {
        compile project(':escommons-core')
        compile project(':escommons-toolkit')
        compile project(':escommons-persistence')
        compile "org.apache.logging.log4j:log4j-core:$log4jVersion"
        compile "org.apache.logging.log4j:log4j-to-slf4j:$log4jVersion"
        implementation "org.springframework.boot:spring-boot-starter"
        optional "org.springframework.boot:spring-boot-configuration-processor"
    }
}

project(':escommons-test') {

    apply plugin: 'maven'

    dependencies {
        compile project(':escommons-core')
        compile project(':escommons-toolkit')
        compile project(':escommons-persistence')
        compile "org.elasticsearch.client:transport:$elasticSearchVersion"
        compile "org.elasticsearch.plugin:transport-netty4-client:$elasticSearchVersion"
        compile "org.codelibs.elasticsearch.lib:plugin-classloader:$elasticSearchVersion"
        compile "org.codelibs.elasticsearch.module:analysis-common:$elasticSearchVersion"
        compile "org.apache.logging.log4j:log4j-core:$log4jVersion"
        compile "org.apache.logging.log4j:log4j-to-slf4j:$log4jVersion"
        implementation "junit:junit"
        implementation "org.springframework:spring-test"
    }
}

project(':escommons-persistence') {

    apply plugin: 'maven'

    dependencies {
        compile project(':escommons-toolkit')
        testImplementation project(":escommons-test")
    }
}

project(':escommons-toolkit') {

    apply plugin: 'maven'

    dependencies {
        compile project(":escommons-core")
        implementation "com.fasterxml.jackson.datatype:jackson-datatype-jsr310"
        implementation "com.fasterxml.jackson.datatype:jackson-datatype-jdk8"
        implementation "com.fasterxml.jackson.module:jackson-module-parameter-names"
        implementation "com.fasterxml.jackson.module:jackson-module-kotlin"
    }
}

project(':escommons-example') {

    apply plugin: "org.springframework.boot"

    dependencies {
        compile project(":escommons-starter-core")
        implementation "org.springframework.boot:spring-boot-starter-web"
        runtimeOnly group: 'ch.qos.logback', name: 'logback-classic'
        testCompile project(":escommons-test")
        testImplementation "org.springframework:spring-test"
    }
}